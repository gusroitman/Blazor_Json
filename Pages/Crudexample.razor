@page "/crudexample"
@using BlazorCrud.Data
@using Newtonsoft.Json

<PageTitle>Crud Example with Blazor using MudBlazor</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Json Example with Blazor</MudText>
<MudText Class="mb-8">This component demonstrates fetching & writing data from/to a json file.</MudText>
@if (provinces == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    <MudText>@Message</MudText>
}
else
{
    <Row>
    <div class="d-flex">
    <MudText class="mt-1 pr-2">Click in the button to read data from file provinces.json : </MudText>
        <MudButton Color="Color.Primary" Size="Size.Small" Clearable="true" Variant="Variant.Outlined" OnClick="GetAllProvinces">
            <MudText>Read Data</MudText>
        </MudButton>
    </div>
    </Row>  
    <br />
    <Row>
    <div class="d-flex">
    <MudText class="mt-3 pr-2">Enter the name of the json file you want to create : </MudText>

    <MudTextField class="pr-2" Style="width:300px" Margin="Margin.Dense" Inmediate="true" @bind-Value="jsonpath" Variant="Variant.Outlined"></MudTextField>
        <MudButton Color="Color.Primary" Size="Size.Small" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.ArrowDownward" OnClick="WriteToJsonProvinces">
    
        @if (_processing)
        {
                        <MudText>Json created!</MudText>
        }
        else
        {
                        <MudText>Download Json</MudText>
        }
        </MudButton>
    </div>
    <br/><br/>
    </Row>
        <MudTable Items="@provinces" SortLabel="Sort By" Elevation="0" Hover="true" Bordered="true" Striped="true" Filter="new Func<Provinces,bool>(FilterFunc)">
        <ToolBarContent>
                 <MudText Typo="Typo.h6">Argentina Provinces</MudText>
                <MudSpacer />
                <MudSelect @bind-Value="stringValue" Dense="true" T="string" Label="Search By..." Variant="Variant.Text"  Class="mt-0 px-1" style="max-width: 250px">
                    <MudSelectItem Value="@("Name")" >Province</MudSelectItem>
                    <MudSelectItem Value="@("Capital")" >Capital</MudSelectItem>
                </MudSelect>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Provinces, object>(x=>x.Name)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Provinces, object>(x=>x.Capital)">Capital</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Provinces, object>(x=>x.Population)">Population</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Provinces, object>(x=>x.PTotalPopulation)">% Total Pop.</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Provinces, object>(x=>x.Density)">Density Pop/km2</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Provinces, object>(x=>x.Territory)">Territory (km2)</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<Provinces, object>(x=>x.PTotalTerritory)">% Total Territory</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Name</MudTd>
            <MudTd DataLabel="Capital">@context.Capital</MudTd>
            <MudTd DataLabel="Population">@context.Population</MudTd>
            <MudTd DataLabel="PTotalPopulation">@context.PTotalPopulation</MudTd>
            <MudTd DataLabel="Density">@context.Density</MudTd>
            <MudTd DataLabel="Territory">@context.Territory</MudTd>
            <MudTd DataLabel="PTotalTerritory">@context.PTotalTerritory</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{10, 20, 30}" />
        </PagerContent>
    </MudTable>
}


@code {
    private List<Provinces> provinces = new List<Provinces>();
    private string? Message { get; set; }
    private string jsonpath { get; set; }
    private bool _processing = false;
    private string searchString = "";
    private string stringValue { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            
        }
        catch (Exception e)
        {
            Message = e.Message;
        }
    }

    public void GetAllProvinces()
    {
        using (StreamReader r = new StreamReader("provinces.json"))
        {
            string json = r.ReadToEnd();
            provinces = JsonConvert.DeserializeObject<List<Provinces>>(json);
        }
        
    }

    public void WriteToJsonProvinces()
    {
        string jpath = jsonpath + ".json";

        List<Provinces> destination = provinces.Select(d => new Provinces
            {
                Name = d.Name,
                Capital = d.Capital,
                Population = d.Population,
                Territory = d.Territory,
                Density = d.Density,
                PTotalPopulation = d.PTotalPopulation,
                PTotalTerritory = d.PTotalTerritory
            }).ToList();

        File.WriteAllText(jpath, JsonConvert.SerializeObject(destination, Formatting.Indented));
        _processing = true;

    }

    private bool FilterFunc(Provinces province)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (stringValue == "Capital")
        {
            if (province.Capital.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
        }
        if (province.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (province.Capital.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        //if ($"{province.Population} {province.Density} {province.Territory}".Contains(searchString))
        //    return true;
        return false;
    }

}
